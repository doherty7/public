<?xml version="1.0" encoding="utf-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg 
	xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	version="1.1"
	id="UIC-DEXTUPLOADX5-PROGRESSIVE"
	onload="onLoadHandler(evt)" width="100%" height="100%">
	<script type="application/ecmascript" xlink:href="../dextuploadx5-common.js"/>
	<script type="application/ecmascript" xlink:href="../dextuploadx5-svg.js"/>
	<script type="application/ecmascript">
          <![CDATA[
		var hp = new SVGHelper();
		var globals = {};		
		var smax = 0;
		var active = false;
    var hostId = "";
		
		function updateUILayout() {
			var root = hp.get("UIC-DEXTUPLOADX5-PROGRESSIVE");
			var s = getElementComputedSize(root);
			if (s.w > 0 || s.h > 0) {
				relayoutDX5(hp.get("UIC-MAIN-AREA"), s.w, s.h);
			}
		}
			
		function updateCurSizeRate(rate) {
			
			var rate = rate / 100,
				r = 85,
				seta = (rate > 0) ? 180 * rate : 0,
				path = hp.get("UIC-SIZE-GAUGE"),
				x = 0,
				y = 0,
				d = "";
					
			// 0%  => M48,164 a85,85 0 0,1 0,0
			// 50%  => M48,164 a85,85 0 0,1 85,-85
			// 100% => M48,164 a85,85 0 0,1 170,0	
			if (seta < 90) {					
				x = r - (r * Math.cos(getRadians(seta)));
				y = (r * Math.sin(getRadians(seta)));
				d = "M48,164 a85,85 0 0,1 " + x + "," + (-y);
			} else {
				x = r + (r * Math.cos(getRadians(180 - seta)));
				y = (r * Math.sin(getRadians(180 - seta)));
				d = "M48,164 a85,85 0 0,1 " + x + "," + (-y);
			}
				
			path.setAttributeNS(null, "d", d);		
				
			var arrow = hp.get("UIC-SIZE-ARROW");
			arrow.transform.baseVal.getItem(0).setRotate(seta, 133, 164);
		}
			
		function updateCurSpeed(s) {
			
			if (s < 0) s = 0;
			if (smax == 0) smax = s;
			else if (s > smax) smax = s;
			
			var rate = smax == 0 ? 0 : s / smax,
				r = 85,
				seta = 180 * rate,
				path = hp.get("UIC-SPEED-GAUGE"),
				x = 0,
				y = 0,
				d = "";
					
			// 0%  => M48,164 a85,85 0 0,1 0,0
			// 50%  => M48,164 a85,85 0 0,1 85,-85
			// 100% => M48,164 a85,85 0 0,1 170,0		
			if (seta < 90) {					
				x = r - (r * Math.cos(getRadians(seta)));
				y = (r * Math.sin(getRadians(seta)));
				d = "M48,164 a85,85 0 0,1 " + x + "," + (-y);
			} else {
				x = r + (r * Math.cos(getRadians(180 - seta)));
				y = (r * Math.sin(getRadians(180 - seta)));
				d = "M48,164 a85,85 0 0,1 " + x + "," + (-y);
			}
				
			path.setAttributeNS(null, "d", d);
				
			var arrow = hp.get("UIC-SPEED-ARROW");
			arrow.transform.baseVal.getItem(0).setRotate(seta, 133, 164);
		}
		
		function progress(t) {
			var status = t.getDownloadStatus();
			
			updateCurSizeRate(status.currentRate);				
			updateCurSpeed(status.totalRate < 100 ? status.currentSpeed : 0);
				
			var speedValue = hp.get("UIC-TXT-CURRENT-SPEED-VALUE"),
				speedUnit = hp.get("UIC-TXT-CURRENT-SPEED-UNIT"),
				txtFilename = hp.get("UIC-TXT-FILENAME"),
				txtWaiting = hp.get("UIC-TXT-WAIT"),
				rectTotSize = hp.get("UIC-TXT-TOTAL-SIZE"),
				txtCurSendTime = hp.get("UIC-TXT-CURRENT-TIME-SEND"),
				txtCurRemainTime = hp.get("UIC-TXT-CURRENT-TIME-REMAIN"),
				txtTotTime = hp.get("UIC-TXT-TOTAL-TIME-VALUE"),
				txtCount = hp.get("UIC-TXT-COUNT-VALUE");
				
			hp.attr(rectTotSize, "width", status.totalRate + "%");
				
			var strSpeed = getFriendlySpeed(status.totalRate < 100 ? status.currentSpeed : 0, 1);
			var tokenSpeed = strSpeed.split(" ");
			
			if (status.totalRate <= 100) {	
				hp.attr(rectTotSize, "fill", "#d7d7d7");
				txtFilename.style.display = "block";
				txtWaiting.style.display = "none";
				hp.replaceText(speedValue, tokenSpeed[0]);
				hp.replaceText(speedUnit, tokenSpeed[1]);
				hp.replaceText(txtFilename, status.currentName);				
				hp.replaceText(txtCurSendTime, msecToTimeFormat(status.currentTime) + " ");
				hp.replaceText(txtCurRemainTime, " " + msecToTimeFormat(status.remainedCurrentTime));
				hp.replaceText(txtTotTime, msecToTimeFormat(status.totalTime) + " / " + msecToTimeFormat(status.remainedTotalTime));
				hp.replaceText(txtCount, status.completeCount + " / " + status.totalCount);
			} 
      
      if (status.totalRate >= 100) {
        setTimeout(function () {
				  hp.attr(rectTotSize, "fill", "#4CAF50");
				  txtFilename.style.display = "none";
				  txtWaiting.style.display = "block";
				  hp.replaceText(speedValue, tokenSpeed[0]);
				  hp.replaceText(speedUnit, tokenSpeed[1]);
				  hp.replaceText(txtFilename, "");				
				  hp.replaceText(txtCurSendTime, msecToTimeFormat(status.currentTime) + " ");
				  hp.replaceText(txtCurRemainTime, " " + msecToTimeFormat(status.remainedCurrentTime));
				  hp.replaceText(txtTotTime, msecToTimeFormat(status.totalTime) + " / " + msecToTimeFormat(status.remainedTotalTime));
				  hp.replaceText(txtCount, status.completeCount + " / " + status.totalCount);
          // change active to false.
          active = false;
        }, 100);
			} else if (active && status.totalRate < 100) {				
				setTimeout(function () { progress(t); }, 100);				
			}
		}
		
		document["stopUI"] = function (lazy) {
			if (lazy) {
				return !active;
			} else {
				active = false;
				return true;
			}
		};
					
		document["updateUI"] = function (t) {
			updateUILayout();
			
			smax = 0;
			active = true;
			hostId = t.domObject.id;
      
			progress(t);
		};
		
		function onLoadHandler(evt) {
			var parameters = {}, lang = "auto";
		
			var tokens = document.defaultView.location.href.split("?");
			if (tokens.length == 2) {
				var p = tokens[1].split(/&|;/);
				if (p.length > 0) {
					for (var i = 0; i < p.length; i++) {
						var vals = p[i].split("=");
						parameters[unescape(vals[0])] = unescape(vals[1]);
					}
				}
			}
			
			if (!parameters.lang || parameters.lang == "auto") {
				lang = navigator.language || navigator.browserLanguage || navigator.systemLanguage;
				lang = lang ? lang.split("-")[0] : "";
			} else {
				lang = parameters.lang;
			}
			
			var worker = new Worker("../dextuploadx5-worker-resource.js");
			worker.onmessage = function (evt) {			
				var gRB = new ResourceBundle();
				gRB.init(evt.data);
				
				hp.replaceText(hp.get("UIC-TITLE-TXT"), gRB.get("RB-POPDN-2-0001", "_파일을 다운로드하는 중 입니다."));
				hp.replaceText(hp.get("UIC-TXT-WAIT"), gRB.get("RB-POPDN-2-0002", "_마무리 작업을 대기하고 있습니다."));
				
				hp.get("UIC-TITLE-BTN-CANCEL").addEventListener("click", function (evt) {
					evt.stopPropagation();
					evt.preventDefault();
					active = false;
					if (window.parent.dx5) {
						window.parent.dx5.popupManager.dn.hide(hostId, true);
            hostId = "";
					}
				}, false);
        
        console.log("DX5: dextuploadx5-dn-2 loaded");
			};
      worker.onerror = function (evt) {
        console.log("DX5: Text resource(dextuploadx5-dn-2.svg) loading failed!\n" + evt.message);
      };
			
			worker.postMessage(lang);
		}
	]]></script>
	<style type="text/css">
		* { font-family: '맑은 고딕', Tahoma }
		.css-txt-title { font-size: 10pt; fill: #fff; font-weight: bold; }	
		.css-txt-filename { font-size: 9pt; fill: #6b6b6b; }
		.css-txt-cur-time-send { font-size: 12pt; fill: #224357; font-weight: bold; }
		.css-txt-cur-time-total { font-size: 12pt; fill: #959595; font-weight: bold; }
		.css-txt-total-time { font-size: 8.5pt; fill: #6b6b6b; }		
		.css-txt-speed { font-size: 24pt; fill: #edeff0; font-weight: bold; }
		.css-txt-cur-speed-value { font-size: 16pt; fill: #224357; font-weight: bold; }
		.css-txt-cur-speed-unit { font-size: 12pt; fill: #959595; font-weight: bold; }
		.css-txt-count { font-size: 8.5pt; fill: #fff; }
		.css-txt-progressive { font-size: 9pt; fill: #fff; }
	</style>
	<defs>
		<symbol id="UIS-UP-ARROW-BOX" viewBox="0 0 16 18">
			<rect x="0" y="0" width="100%" height="100%" stroke="none" fill="white"/>
			<path d="M8,3 l6,6 h-3 v4 h-6 v-4 h-3 z" stroke="none" fill="red"/>
		</symbol>
		<symbol id="UIS-CANCEL" viewBox="0 0 16 16">
			<path d="M0,3 l3,-3 l5,5 l5,-5 l3,3 l-5,5 l5,5 l-3,3 l-5,-5 l-5,5 l-3,-3 l5,-5 z" stroke="none" fill="white"/>		
		</symbol>
		<symbol id="UIS-ARROW" viewBox="0 0 80 21">
			<path stroke="none" fill="#506470" d="M0,10 l70,-5 v11 z"/>		
			<circle cx="70" cy="10" r="10" stroke="none" fill="#506470"/>
			<circle cx="70" cy="10" r="5" stroke="none" fill="#fff"/>
		</symbol>
	</defs>
	<svg id="UIC-MAIN-AREA" x="0" y="0" width="100%" height="100%">
		<svg x="0" y="0" width="100%" height="40">
			<rect x="0" y="0" width="100%" height="100%" stroke="none" fill="#465b70"/>
			<use id="UIC-TITLE-ICON" xlink:href="#UIS-UP-ARROW-BOX" x="15" y="11" width="16" height="18"/>
			<text id="UIC-TITLE-TXT" x="40" y="26" class="css-txt-title">DOWNLOADING</text>
			<use id="UIC-TITLE-BTN-CANCEL" xlink:href="#UIS-CANCEL" x="500" y="15" width="12" height="12" style="cursor:pointer;"/>
		</svg>
		<svg x="0" y="40" width="100%" height="234">
			<rect x="0" y="0" width="100%" height="100%" stroke="none" fill="#f7f7f7"/>
			<svg id="UIC-LEFT" x="0" y="0" width="50%" height="100%">
				<rect x="93" y="30" width="80" height="20" fill="#465b70" stroke="none"/>
				<text id="UIC-TXT-COUNT-VALUE" x="133" y="44" class="css-txt-count" text-anchor="middle">9999 / 9999</text>
				<path stroke="none" fill="#ffffff" d="M48,164 a85,85 0 0,1 170,0 z"/>	
				<path stroke="#ebebeb" stroke-width="10" stroke-linecap="butt" fill="none" d="M48,164 a85,85 0 0,1 170,0"/>
				<path id="UIC-SIZE-GAUGE" stroke="#65c3df" stroke-width="10" stroke-linecap="butt" fill="none" d="M48,164 a85,85 0 0,1 85,-85"/>		
				<script type="text/ecmascript"><![CDATA[
					var pl = hp.get("UIC-LEFT"), x = 0, y = 0;
					for (var i = 0; i <= 180; i += 2) {
						if (i % 10 == 0) {
							y = 164 - (Math.sin(getRadians(i)) * 90);
							x = 133 - (Math.cos(getRadians(i)) * 90);
						} else {
							y = 164 - (Math.sin(getRadians(i)) * 83);
							x = 133 - (Math.cos(getRadians(i)) * 83);	
						}						
						pl.appendChild(hp.create("line", undefined, { x1: 133, y1: 164, x2: x, y2: y, stroke: "#fff" }));
					}
				]]></script>
				<use id="UIC-SIZE-ARROW" xlink:href="#UIS-ARROW" x="133" y="154" width="80" height="21" transform="rotate(0, 133, 164), translate(-70, 0)"/>
				<text id="UIC-TXT-CURRENT-TIME-SEND" x="130" y="208" text-anchor="end" class="css-txt-cur-time-send">00:00:00</text>
				<text x="133" y="208" class="css-txt-cur-time-total" text-anchor="middle"> / </text>
				<text id="UIC-TXT-CURRENT-TIME-REMAIN" x="136" y="208" text-anchor="start" class="css-txt-cur-time-total" >00:00:40</text>
			</svg>
			<svg id="UIC-RIGHT" x="50%" y="0" width="50%" height="100%">
				<path stroke="none" fill="#ffffff" d="M48,164 a85,85 0 0,1 170,0 z"/>	
				<path stroke="#ebebeb" stroke-width="10" stroke-linecap="butt" fill="none" d="M48,164 a85,85 0 0,1 170,0"/>
				<path id="UIC-SPEED-GAUGE" stroke="#8dc63f" stroke-width="10" stroke-linecap="butt" fill="none" d="M48,164 a85,85 0 0,1 85,-85"/>		
				<script type="text/ecmascript"><![CDATA[
					var pr = hp.get("UIC-RIGHT"), x = 0, y = 0;
					for (var i = 0; i <= 180; i += 2) {
						if (i % 10 == 0) {
							y = 164 - (Math.sin(getRadians(i)) * 90);
							x = 133 - (Math.cos(getRadians(i)) * 90);
						} else {
							y = 164 - (Math.sin(getRadians(i)) * 83);
							x = 133 - (Math.cos(getRadians(i)) * 83);	
						}						
						pr.appendChild(hp.create("line", undefined, { x1: 133, y1: 164, x2: x, y2: y, stroke: "#fff" }));
					}
				]]></script>
				<text x="133" y="140" class="css-txt-speed" text-anchor="middle">SPEED</text>
				<use id="UIC-SPEED-ARROW" xlink:href="#UIS-ARROW" x="133" y="154" width="80" height="21" transform="rotate(0, 133, 164), translate(-70, 0)"/>
				<text id="UIC-TXT-CURRENT-SPEED-VALUE" x="130" y="214" text-anchor="end" class="css-txt-cur-speed-value">0</text>
				<text x="133" y="214" text-anchor="middle"> </text>
				<text id="UIC-TXT-CURRENT-SPEED-UNIT" x="136" y="214" text-anchor="start" class="css-txt-cur-speed-unit" >B/s</text>
			</svg>
		</svg>
		<svg x="0" y="274" height="26" width="100%" >		
			<rect x="0" y="0" width="100%" height="100%" stroke="none" fill="#ebebeb"/>
			<rect id="UIC-TXT-TOTAL-SIZE" x="0" y="0" width="50%" height="100%" stroke="none" fill="#d7d7d7"/>
			<svg x="20" y="0" width="50%" height="100%">
				<text id="UIC-TXT-FILENAME" class="css-txt-filename" x="0" y="17">Redis Clustering.docx</text>
				<text id="UIC-TXT-WAIT" x="0" y="17" class="css-txt-progressive">Waiting server response...</text>
			</svg>
			<text id="UIC-TXT-TOTAL-TIME-VALUE" class="css-txt-total-time" x="510" y="17" text-anchor="end">00:00:00 / 00:00:00</text>
		</svg>
	</svg>
</svg>
