/*
 * DEXTUploadX5 - elemental classes
 * http://www.dextsolution.com
 *
 * Copyright DEVPIA Inc.
 */
;; (function (win) { var FI = function () { this.controlId = ""; this.id = ""; this.vindex = ""; this.type = ""; this.name = ""; this.ext = ""; this.openUrl = ""; this.downUrl = "";   this.url = ""; this.lock = false; this.mime = "";     this.size = -1; this.mdate = null; this.thumbnail = ""; this.status = "WAIT"; this.checked = false; this.ofile = null; this.meta = {}; this.onUpdated = null; this.mdate = 0;   this.path = ""; this.middlePath = "";   this.imageWidth = 0; this.imageHeight = 0; this.exif = "";  
this.eventUriStart = ""; this.eventUriStop = ""; this.eventUriEnd = "";   this.chunkSize = -1;   this.hdTitle = ""; }; FI.prototype.update = function () { if (this.onUpdated && typeof(this.onUpdated) === "function") { this.onUpdated(this); } }; FI.prototype.toVirtual = function (openUrl, downUrl) { if (this.type !== "FILE") return; this.type = "VIRTUAL"; this.status = "WAIT"; if (typeof(openUrl) != "undefined") { this.openUrl = openUrl; } if (typeof(downUrl) != "undefined") { this.downUrl = downUrl; }
this.update(); }; FI.prototype.toString = function () { return "[object DX5FileItem]"; }; FI.prototype.toContentString = function () { return this.id + " " + this.type + " " + this.status + " " + this.checked; }; var FL = function () { Array.call(this); this.totalSizeA = 0; this.totalSizeL = 0; this.virtualLength = 0; }; FL.prototype = Object.create(Array.prototype); FL.prototype.update = function () { this.totalSizeA = 0; this.totalSizeL = 0; this.virtualLength = 0; for (var i = 0; i < this.length; i++) { if (false == (this[i].toString() == "[object DX5FileItem]")) continue;
  if (this[i].size > 0) this.totalSizeA += this[i].size; if ("FILE" == this[i].type && this[i].ofile) { this.totalSizeL += this[i].ofile.size; } else if ("VIRTUAL" == this[i].type) { this.virtualLength++; } } }; FL.prototype.onchanged = function (ev) { this.update(); }; FL.prototype.push = function (f) { if (f.toString() == "[object DX5FileItem]") { Array.prototype.push.call(this, f); this.onchanged({ state: "add", target: f }); } else { console.log("f is not DX5FileItem => " + f.toString()); } }; FL.prototype.pop = function () {
var f = null; while (true) { f = Array.prototype.pop.call(this); if (f.toString() == "[object DX5FileItem]") { this.onchanged({ state: "delete", target: f }); break; } } return f; }; FL.prototype.shift = function () { var f = null; while (true) { f = Array.prototype.shift.call(this); if (f.toString() == "[object DX5FileItem]") { this.onchanged({ state: "shift", target: f }); break; } } return f; }; FL.prototype.getTotalSize = function (onlyLocal) { return onlyLocal === true ? this.totalSizeL : this.totalSizeA; };
FL.prototype.getLength = function (onlyLocal) { return onlyLocal === true ? this.length - this.virtualLength : this.length; }; FL.prototype.getItem = function (id) { var target = null; for (var i = 0; i < this.length; i++) { if (id == this[i].id) { target = this[i]; break; } } return target; }; FL.prototype.removeById = function (id) { var t = null; for (var i = 0; i < this.length; i++) { t = this[i]; if (id == t.id) { this.splice(i, 1); this.onchanged({ state: "delete", target: t }); break; } } };
FL.prototype.removeByIndex = function (index) { var t = null; if (index < this.length) { t = this[index]; this.splice(index, 1); this.onchanged({ state: "delete", target: t }); } }; FL.prototype.removeByObject = function (obj) { var t = null; for (var i = 0; i < this.length; i++) { t = this[i]; if (obj == t) { this.splice(i, 1); this.onchanged({ state: "delete", target: t }); break; } } }; FL.prototype.clear = function (flag) { for (var i = 0; i < this.length;) { if (flag == this[i].type) { this.splice(i, 1); } else {
i++; } } this.onchanged({ state: "clear", target: null }); }; var US = function () { this.xhr = null; this.totalSize = 0; this.totalCount = 0; this.totalSendSize = 0; this.totalPrevSendSize = 0; this.completeCount = 0; this.uploadStartTime = null; this.uploadCountTime = 0; this.currentStartTime = null; this.currentCountTime = 0; this.chunkedStartTime = null; this.chunkedCountTime = 0; this.currentItem = null; this.currentName = ""; this.currentSize = 0; this.currentSendSize = 0; this.currentChunkedAction = "P"; this.currentChunkedSize = 0;
this.currentChunkedPrevSendSize = 0; this.currentLocalKey = ""; this.currentServerKey = ""; this.currentServerSize = 0; this.currentResponseValue = ""; }; US.prototype.clear = function () { this.totalSize = this.totalCount = this.totalSendSize = this.totalPrevSendSize = this.completeCount = 0; this.uploadStartTime = null; this.currentStartTime = null; this.currentItem = null; this.currentName = ""; this.currentSize = this.currentSendSize = 0; this.currentChunkedAction = "P"; this.currentChunkedSize = 0; this.currentChunkedPrevSendSize = 0;
this.currentLocalKey = ""; this.currentServerKey = ""; this.currentServerSize = 0; this.currentResponseValue = ""; }; US.prototype.clearItem = function () { this.currentStartTime = null; this.currentItem = null; this.currentName = ""; this.currentSize = this.currentSendSize = 0; this.currentChunkedAction = "P"; this.currentChunkedSize = 0; this.currentChunkedPrevSendSize = 0; this.currentLocalKey = ""; this.currentServerKey = ""; this.currentServerSize = 0; this.currentResponseValue = ""; }; US.prototype.getTotalRate = function () { if (this.totalSize == 0)
  return 100.0; else return parseFloat((this.totalSendSize * 100 / this.totalSize).toFixed(1)); }; US.prototype.getTotalSpeed = function () { var diff = this.uploadCountTime + this.currentCountTime + this.chunkedCountTime; var sec = (diff - (diff % 1000)) / 1000; return parseFloat(sec == 0 ? this.totalSendSize.toFixed(1) : (this.totalSendSize / sec).toFixed(1)); }; US.prototype.getTotalSendTime = function () { return this.uploadStartTime ? Date.now() - this.uploadStartTime : 0; }; US.prototype.getCurrentRate = function () { if (this.currentSize == 0)
  return 100.0; else return parseFloat((this.currentSendSize * 100 / this.currentSize).toFixed(1)); }; US.prototype.getCurrentSendTime = function () { return this.currentStartTime ? Date.now() - this.currentStartTime : 0; }; US.prototype.getCurrentSpeed = function () {   var diff = this.currentCountTime + this.chunkedCountTime; var sec = (diff - (diff % 1000)) / 1000; return parseFloat(sec == 0 ? this.currentSendSize.toFixed(1) : (this.currentSendSize / sec).toFixed(1)); }; US.prototype.getRemainedTotalTime = function () { var remainedSize = this.totalSize - this.totalSendSize;
var speed = this.getTotalSpeed(); if (remainedSize > 0) { return (speed == 0 ? Infinity : (remainedSize * 1000 / speed)); } else { return 0; } }; US.prototype.getRemainedCurrentTime = function () { var remainedSize = this.currentSize - this.currentSendSize; var speed = this.getCurrentSpeed(); if (remainedSize > 0) { return (speed == 0 ? Infinity : (remainedSize * 1000 / speed)); } else { return 0; } };   var DS = function () { this.xhr = null;   this.totalSize = 0;   this.totalCount = 0;   this.totalSendSize = 0;  
this.totalPrevSendSize = 0;   this.completeCount = 0; this.downloadStartTime = null; this.downloadCountTime = 0; this.currentStartTime = null; this.currentCountTime = 0; this.currentItem = null; this.currentName = ""; this.currentSize = 0; this.currentSendSize = 0; }; DS.prototype.clear = function () { this.totalSize = this.totalCount = this.totalSendSize = this.totalPrevSendSize = this.completeCount = 0; this.downloadStartTime = null; this.currentStartTime = null; this.currentItem = null; this.currentName = ""; this.currentSize = this.currentSendSize = 0;
}; DS.prototype.clearItem = function () { this.currentStartTime = null; this.currentItem = null; this.currentName = ""; this.currentSize = this.currentSendSize = 0; };   DS.prototype.getTotalRate = function () { if (this.totalSize == 0)   return 100.0; else return parseFloat((this.totalSendSize * 100 / this.totalSize).toFixed(1)); }; DS.prototype.getTotalSpeed = function () {   var diff = this.downloadCountTime + this.currentCountTime; var sec = (diff - (diff % 1000)) / 1000;   return parseFloat(sec == 0 ? this.totalSendSize.toFixed(1) : (this.totalSendSize / sec).toFixed(1)); };
  DS.prototype.getTotalSendTime = function () { return this.downloadStartTime ? Date.now() - this.downloadStartTime : 0; };   DS.prototype.getCurrentRate = function () { if (this.currentSize == 0)   return 100.0; else return parseFloat((this.currentSendSize * 100 / this.currentSize).toFixed(1)); };   DS.prototype.getCurrentSendTime = function () { return this.currentStartTime ? Date.now() - this.currentStartTime : 0; }; DS.prototype.getCurrentSpeed = function () {   var diff = this.currentCountTime; var sec = (diff - (diff % 1000)) / 1000;
  return parseFloat(sec == 0 ? this.currentSendSize.toFixed(1) : (this.currentSendSize / sec).toFixed(1)); }; DS.prototype.getRemainedTotalTime = function () { var remainedSize = this.totalSize - this.totalSendSize; var speed = this.getTotalSpeed(); if (remainedSize > 0) { return (speed == 0 ? Infinity : (remainedSize * 1000 / speed)); } else { return 0; } }; DS.prototype.getRemainedCurrentTime = function () { var remainedSize = this.currentSize - this.currentSendSize; var speed = this.getCurrentSpeed(); if (remainedSize > 0) {
return (speed == 0 ? Infinity : (remainedSize * 1000 / speed)); } else { return 0; } }; win.DX5FileItem = FI; win.DX5FileList = FL; win.DX5UploadStatus = US; win.DX5DownloadStatus = DS; })(window); 